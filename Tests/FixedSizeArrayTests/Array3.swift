// Generated by generate-fixed-size-array v1.0.0-alpha on 2022-08-26T18:25:03Z.

import FixedSizeArray

struct Array3<Element>: FixedSizeArray {
    typealias Index = Int
    
    private var storage: (
        Element, Element, Element
    )
    
    @inline(__always)
    static var count: Int {
        3
    }
    
    @inline(__always)
    static var indices: Range<Index> {
        0..<3
    }
    
    @inline(__always)
    init(repeating element: Element) {
        storage = (
            element, element, element
        )
    }
    
    @inline(__always)
    init(
        _ e0: Element,
        _ e1: Element,
        _ e2: Element
    ) {
        storage = (
            e0,
            e1,
            e2
        )
    }
}

extension Array3: Decodable where Element: AdditiveArithmetic & Decodable {}

extension Array3: Encodable where Element: Encodable {}

extension Array3: Equatable where Element: Equatable {}

extension Array3: ExpressibleByArrayLiteral where Element: AdditiveArithmetic {}

extension Array3: Hashable where Element: Hashable {}

extension Array3: Sendable where Element: Sendable {}
