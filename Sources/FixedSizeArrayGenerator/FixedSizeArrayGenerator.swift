import Algorithms
import ArgumentParser
import Foundation

@main
struct FixedSizeArrayGenerator: ParsableCommand {
    static var configuration = CommandConfiguration(
        abstract: "Generate a fixed-size array implementation for Swift.",
        version: "1.0.0-alpha"
    )
    
    @Argument(help: "The element count of the generated fixed-size array.")
    var count: Int
    
    @Flag(help: "Generate a public declaration.")
    var `public`: Bool = false
    
    @Option(help: "The output file.")
    var outputFile: String?
    
    func validate() throws {
        guard count > 0 else {
            throw ValidationError("Please choose a positive element count.")
        }
    }
    
    mutating func run() throws {
        let result = """
        // Generated by generate-fixed-size-array v\(Self.configuration.version) on \
        \(Date.now.ISO8601Format()).
        
        import FixedSizeArray
        
        \(publicPrefix)struct Array\(count)<Element>: FixedSizeArray {
            
            \(publicPrefix)typealias Index = Int
            
            private var storage: (
        \(repeatElement("Element", count: count)
            .lazy
            .chunks(ofCount: 8)
            .map({ "        " + $0.joined(separator: ", ") })
            .joined(separator: ",\n"))
            )
            
            @inline(__always)
            \(publicPrefix)static var count: Int {
                \(count)
            }
            
            @inline(__always)
            \(publicPrefix)static var indices: Range<Index> {
                0..<\(count)
            }
            
            @inline(__always)
            \(publicPrefix)init(repeating element: Element) {
                storage = (
        \(repeatElement("element", count: count)
            .lazy
            .chunks(ofCount: 8)
            .map({ "            " + $0.joined(separator: ", ") })
            .joined(separator: ",\n"))
                )
            }
            
            @inline(__always)
            \(publicPrefix)init(
        \((0..<count)
                .lazy
                .map({ "        _ e\($0): Element" })
                .joined(separator: ",\n"))
            ) {
                storage = (
        \((0..<count)
                .lazy
                .map({ "            e\($0)" })
                .joined(separator: ",\n"))
                )
            }
        }
        
        extension Array\(count): Decodable where Element: AdditiveArithmetic & Decodable {}
        
        extension Array\(count): Encodable where Element: Encodable {}
        
        extension Array\(count): Equatable where Element: Equatable {}
        
        extension Array\(count): ExpressibleByArrayLiteral where Element: AdditiveArithmetic {}
        
        extension Array\(count): Hashable where Element: Hashable {}
        
        extension Array\(count): Sendable where Element: Sendable {}
        """
        
        if let outputFile = outputFile {
            try result.write(toFile: outputFile, atomically: true, encoding: .utf8)
        } else {
            print(result)
        }
    }
    
    private var publicPrefix: String {
        `public` ? "public " : ""
    }
}
